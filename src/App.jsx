import "./reset.css";
import "./App.css";
import { Header } from "./Components/Header";
import { useState, useEffect } from "react";
import axios from "axios";

const sizes = [
  { id: "s", boy: "KÃ¼Ã§Ã¼k" },
  { id: "m", boy: "Orta" },
  { id: "l", boy: "BÃ¼yÃ¼k" },
];

const kalinlik = [
  { id: "i", size: "Ä°nce" },
  { id: "n", size: "Normal" },
  { id: "k", size: "KalÄ±n" },
];

const ekstralar = [
  { id: 1, name: "Pepperoni" },
  { id: 2, name: "Domates" },
  { id: 3, name: "Biber" },
  { id: 4, name: "Sosis" },
  { id: 5, name: "MÄ±sÄ±r" },
  { id: 6, name: "Sucuk" },
  { id: 7, name: "Kanada Jambonu" },
  { id: 8, name: "Ananas" },
  { id: 9, name: "Tavuk Izgara" },
  { id: 10, name: "Jalepeno" },
  { id: 11, name: "Kabak" },
  { id: 12, name: "SoÄŸan" },
  { id: 13, name: "SarÄ±msak" },
];

function App() {
  const [count, setCount] = useState(1);
  const [formData, setFormData] = useState({
    price: 85.5,
    boySecim: "",
    kalinlikSecim: "",
    secimler: [],
    siparisNotu: "",
    total: 85.5 * count,
    npmHizindaTeslimat: false,
  });
  const [errors, setErrors] = useState({});
  const [isValid, setIsValid] = useState(false);

  useEffect(() => {
    const toplam =
      formData.price * count + formData.secimler.length * 5 * count;
    setFormData((prevData) => ({
      ...prevData,
      total: toplam,
    }));
  }, [formData.price, count, formData.secimler]);

  useEffect(() => {
    validateForm();
  }, [formData, count]);

  const decrement = (e) => {
    e.preventDefault();
    count > 1 ? setCount(count - 1) : setCount(1);
  };

  const increment = (e) => {
    e.preventDefault();
    setCount(count + 1);
  };

  const handleChange = (event) => {
    const { name, value, type, checked } = event.target;

    setFormData((prevData) => {
      if (type === "checkbox") {
        if (name === "npmHizindaTeslimat") {
          return {
            ...prevData,
            npmHizindaTeslimat: checked,
            total: checked ? prevData.total + 50 : prevData.total - 50,
          };
        } else {
          const updatedSecimler = checked
            ? [...prevData.secimler, value]
            : prevData.secimler.filter((item) => item !== value);
          return { ...prevData, secimler: updatedSecimler };
        }
      }
      return { ...prevData, [name]: value };
    });
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.boySecim) {
      newErrors.size = "Bir boyut seÃ§melisiniz.";
    }

    if (!formData.kalinlikSecim) {
      newErrors.dough = "Hamur kalÄ±nlÄ±ÄŸÄ± seÃ§melisiniz.";
    }

    if (formData.secimler.length < 3) {
      newErrors.extras = "En az 3 malzeme seÃ§melisiniz.";
    }

    if (!formData.siparisNotu) {
      newErrors.siparisNotu = "SipariÅŸ notu boÅŸ bÄ±rakÄ±lamaz.";
    } else if (formData.siparisNotu.length < 5) {
      newErrors.siparisNotu = "SipariÅŸ notu en az 5 karakter olmalÄ±dÄ±r.";
    }

    setErrors(newErrors);
    setIsValid(Object.keys(newErrors).length === 0);
  };

  const handleSubmit = (event) => {
    event.preventDefault();

    if (isValid) {
      axios
        .post("https://reqres.in/api/pizza", formData)
        .then((response) => {
          alert("SipariÅŸ baÅŸarÄ±yla gÃ¶nderildi!");
          console.log("SipariÅŸ BaÅŸarÄ±lÄ±:", response.data);
        })
        .catch((error) => {
          alert("Bir hata oluÅŸtu, lÃ¼tfen tekrar deneyin.");
          console.error("SipariÅŸ gÃ¶nderilirken hata:", error);
        });
    }
  };

  return (
    <div className="bg-main">
      <header className="flex container-lg jc">
        <Header />
      </header>

      <main className="bg-secondary p-ts ">
        <div className="container-md flex-col gap-s barlow">
          <h2>Position Absolute AcÄ±lÄ± Pizza</h2>
          <div className="flex between">
            <p className="pricetag">{formData.price} TL</p>
            <div className="flex gap-m review">
              <div>
                <p>Puan</p>
              </div>
              <div>
                <p>Yorum</p>
              </div>
            </div>
          </div>
          <article className="article">
            Frontend Dev olarak hala position:absolute kullanÄ±yorsan bu Ã§ok acÄ±
            pizza tam sana gÃ¶re. Pizza, domates, peynir ve genellikle Ã§eÅŸitli
            diÄŸer malzemelerle kaplanmÄ±ÅŸ, daha sonra geleneksel olarak odun
            ateÅŸinde bir fÄ±rÄ±nda yÃ¼ksek sÄ±caklÄ±kta piÅŸirilen, genellikle
            yuvarlak, dÃ¼zleÅŸtirilmiÅŸ mayalÄ± buÄŸday bazlÄ± hamurdan oluÅŸan Ä°talyan
            kÃ¶kenli lezzetli bir yemektir. KÃ¼Ã§Ã¼k bir pizzaya bazen pizzetta
            denir.
          </article>
          <form className="barlow flex-col between" onSubmit={handleSubmit}>
            <div className="flex between margin-bottom">
              <div className="flex-col gap-s">
                <h3 className="margin-bottom">
                  Boyut SeÃ§ <span style={{ color: "red" }}>*</span>
                </h3>
                {sizes.map((boyut) => (
                  <label className="flex gap-s" key={boyut.id}>
                    <input
                      type="radio"
                      name="boySecim"
                      value={boyut.boy}
                      checked={formData.boySecim === boyut.boy}
                      onChange={handleChange}
                    />
                    {boyut.boy}
                  </label>
                ))}
                {errors.size && <p style={{ color: "red" }}>{errors.size}</p>}
              </div>

              <div>
                <label htmlFor="hamur" className="flex-col">
                  <h3 className="margin-bottom">
                    Hamur KalÄ±nlÄ±ÄŸÄ± <span style={{ color: "red" }}>*</span>
                  </h3>
                  <select
                    name="kalinlikSecim"
                    value={formData.kalinlikSecim}
                    onChange={handleChange}
                    disabled={!formData.boySecim}
                  >
                    <option value="" disabled>
                      KalÄ±nlÄ±k SeÃ§iniz
                    </option>
                    {kalinlik.map((kalinlik) => (
                      <option key={kalinlik.id} value={kalinlik.size}>
                        {kalinlik.size}
                      </option>
                    ))}
                  </select>
                </label>
                {errors.dough && <p style={{ color: "red" }}>{errors.dough}</p>}
              </div>
            </div>

            <div>
              <h2>Ek Malzemeler</h2>
              <p className="margin-bottom">
                En az 3, fazla 10 malzeme seÃ§ebilirsiniz.
                <span style={{ color: "red", fontWeight: "600" }}>
                  {" "}
                  Tanesi 5 TL
                </span>
              </p>
              <div className="grid-container">
                {ekstralar.map((ekstra) => (
                  <div className="grid-item" key={ekstra.id}>
                    <label className="flex gap-s margin-bottom semi-bold">
                      <input
                        type="checkbox"
                        name="secimler"
                        value={ekstra.name}
                        onChange={handleChange}
                        disabled={formData.secimler.length >= 10}
                      />
                      {ekstra.name}
                    </label>
                  </div>
                ))}
              </div>
              {errors.extras && <p style={{ color: "red" }}>{errors.extras}</p>}
            </div>

            <div className="flex-col margin-bottom-lg">
              <label htmlFor="siparisNotu">
                <h3>SipariÅŸ Notu:</h3>
              </label>
              <textarea
                name="siparisNotu"
                value={formData.siparisNotu}
                onChange={handleChange}
                placeholder="SipariÅŸine eklemek istediÄŸin bir not var mÄ±?"
                style={{
                  maxWidth: "960px",
                  minWidth: "376px",
                  borderRadius: "5px",
                }}
                cols={5}
                rows={4}
              />
              {errors.siparisNotu && (
                <p style={{ color: "red" }}>{errors.siparisNotu}</p>
              )}
            </div>
            <hr />
            <label className="flex gap-s semi-bold padding-s">
              <input
                type="checkbox"
                name="npmHizindaTeslimat"
                checked={formData.npmHizindaTeslimat}
                onChange={handleChange}
              />
              Npm HÄ±zÄ±nda Acil Teslimat ðŸ›µðŸ’¨
              <span style={{ color: "red" }}>(+50 TL)</span>
            </label>

            <hr className="margin-bottom-lg" />
            <div className="flex between">
              <div className="buton-div">
                <button className="buton" onClick={decrement}>
                  -
                </button>
                <div className="counter semi-bold">{count}</div>
                <button className="buton" onClick={increment}>
                  +
                </button>
              </div>

              <div className="order-container">
                <div className="flex-col">
                  <h3 className="padding-s">SipariÅŸ ToplamÄ±</h3>
                  <div className="flex between padding-s semi-bold">
                    <div>SeÃ§imler:</div>
                    <div>{formData.secimler.length * 5} TL</div>
                  </div>
                  <div
                    className="flex between padding-s margin-bottom semi-bold"
                    style={{ color: "#CE2829" }}
                  >
                    <div>Toplam:</div>
                    <div>
                      {formData.total}
                      TL
                    </div>
                  </div>
                  <button
                    type="submit"
                    className="buton semi-bold black padding-s"
                    disabled={!isValid}
                  >
                    SÄ°PARÄ°Åž VER
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
      </main>
    </div>
  );
}

export default App;
